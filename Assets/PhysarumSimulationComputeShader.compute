// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateAgent

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
const float PI = 3.141;

RWTexture2D<float4> UpdateAgentTrailMap;

struct Agent
{
    float2 position;
    float speed;
    float angle;
};

RWStructuredBuffer<Agent> Agents;

int canvasWidth;
int canvasHeight;
uint numAgents;

[numthreads(16,1,1)]
void UpdateAgent (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numAgents) return;

    Agent agent = Agents[id.x];
    float2 position = agent.position;
    float speed = agent.speed;
    float angle = agent.angle;

    float2 velocity = speed * float2(cos(angle), sin(angle));
    float2 newPosition = position + velocity;

    bool updatePosition = true;

    if (newPosition.x <= 0 || newPosition.x >= canvasWidth)
    {
        Agents[id.x].angle = 3.14 - angle;
        updatePosition = false;
    }

    if (newPosition.y <= 0 || newPosition.y >= canvasHeight)
    {
        Agents[id.x].angle *= -1;
        updatePosition = false;
    }

    if (updatePosition) Agents[id.x].position = newPosition; 

    UpdateAgentTrailMap[int2(position)] = float4(1, 1, 1, 1);
}

#pragma kernel DiffuseAndDissipate

RWTexture2D<float4> DiffuseAndDissipateTrailMap;

[numthreads(8,8,1)]
void DiffuseAndDissipate (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)canvasWidth || id.y < 0 || id.y >= (uint)canvasHeight) {
		return;
	}

    float4 originalValue = DiffuseAndDissipateTrailMap[id.xy];
    DiffuseAndDissipateTrailMap[id.xy] = originalValue - 0.001;
}