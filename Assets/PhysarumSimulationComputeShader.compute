// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateAgent

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
const float PI = 3.141;

RWTexture2D<float4> UpdateAgentTrailMap;

struct Agent
{
    float2 position;
    float speed;
    float angle;
    int species;
};

RWStructuredBuffer<Agent> Agents;

int canvasWidth;
int canvasHeight;
uint numAgents;

float random(uint seed)
{
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return seed / 4294967295.0;
}

float getColorComponent(float4 color, int component)
{
    if (component == 0) return color.r;
    else if (component == 1) return color.g;
    else if (component == 2) return color.b;
    else if (component == 3) return color.a;
    else return -1;
}

float getUpdatedAngle(float2 agentPosition, float agentAngle, int species)
{
    float sampleAngle, sampleLeft, sampleStraight, sampleRight;
    float2 sampleOffset;

    // Sampling Left
    sampleAngle = agentAngle + 0.5;
    sampleOffset = 4 * float2(cos(sampleAngle), sin(sampleAngle));
    sampleLeft = getColorComponent(UpdateAgentTrailMap[int2(agentPosition + sampleOffset)], species);

    // Sample Straight
    sampleAngle = agentAngle;
    sampleOffset = 4 * float2(cos(sampleAngle), sin(sampleAngle));
    sampleStraight = getColorComponent(UpdateAgentTrailMap[int2(agentPosition + sampleOffset)], species);

    // Sample Right
    sampleAngle = agentAngle - 0.5;
    sampleOffset = 4 * float2(cos(sampleAngle), sin(sampleAngle));
    sampleRight = getColorComponent(UpdateAgentTrailMap[int2(agentPosition + sampleOffset)], species);

    if (sampleStraight < sampleLeft && sampleStraight < sampleRight)
	{
		float randomSteerStrength = random(agentPosition.y * canvasWidth + agentPosition.x);

		if (randomSteerStrength >= 0.1) return agentAngle + 0.9;
		else return agentAngle - 0.9;
	}
	else if (sampleLeft < sampleRight) return agentAngle + 0.9;
	else if (sampleLeft > sampleRight) return agentAngle - 0.9;

    return agentAngle;
}

[numthreads(16,1,1)]
void UpdateAgent (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numAgents) return;

    Agent agent = Agents[id.x];
    float2 position = agent.position;
    float speed = agent.speed;
    float angle = agent.angle;
    int species = agent.species;

    Agents[id.x].angle = getUpdatedAngle(position, angle, species);

    float2 velocity = speed * float2(cos(angle), sin(angle));
    float2 newPosition = position + velocity;

    // Checking edge collisions
    bool updatePosition = true;
    if (newPosition.x <= 0 || newPosition.x >= canvasWidth)
    {
        Agents[id.x].angle = 3.14 - angle;
        updatePosition = false;
    }
    if (newPosition.y <= 0 || newPosition.y >= canvasHeight)
    {
        Agents[id.x].angle *= -1;
        updatePosition = false;
    }

    // Updating position if new position is within bounds
    if (updatePosition) Agents[id.x].position = newPosition; 

    if (species == 0)
        UpdateAgentTrailMap[int2(position)] = float4(0, 1, 1, 1);
    else if (species == 1)
        UpdateAgentTrailMap[int2(position)] = float4(1, 0, 1, 1);
    else if (species == 2)
        UpdateAgentTrailMap[int2(position)] = float4(1, 1, 0, 1);

    // if (species == 0)
    //     UpdateAgentTrailMap[int2(position)] = float4(1, 0, 0, 0);
    // else if (species == 1)
    //     UpdateAgentTrailMap[int2(position)] = float4(0, 1, 0, 0);
    // else if (species == 2)
    //     UpdateAgentTrailMap[int2(position)] = float4(0, 0, 1, 0);
}

#pragma kernel DiffuseAndDissipate

RWTexture2D<float4> DiffuseAndDissipateTrailMap;

[numthreads(8,8,1)]
void DiffuseAndDissipate (uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)canvasWidth || id.y < 0 || id.y >= (uint)canvasHeight) {
		return;
	}
    
    float4 originalValue = DiffuseAndDissipateTrailMap[id.xy];

	// 3x3 blur simulates diffusion
    float4 sum = 0;
	for (int offsetX = -1; offsetX <= 1; offsetX ++) {
		for (int offsetY = -1; offsetY <= 1; offsetY ++) {
			int sampleX = min(canvasWidth-1, max(0, id.x + offsetX));
			int sampleY = min(canvasHeight-1, max(0, id.y + offsetY));
			sum += DiffuseAndDissipateTrailMap[int2(sampleX, sampleY)];
		}
	}
    float4 diffusedValue = 0.3 * (sum / 9) + 0.7 * originalValue;

    // Subtracting value simulates dissipation
    DiffuseAndDissipateTrailMap[id.xy] = max(0, diffusedValue - 0.007);
}